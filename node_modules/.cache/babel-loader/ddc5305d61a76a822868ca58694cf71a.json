{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anto\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\ProgressSection.js\";\nimport React, { useState } from \"react\";\n\nfunction ProgressSection({\n  session,\n  focusDuration,\n  breakDuration,\n  minutesToDuration,\n  secondsToDuration,\n  isTimerRunning,\n  showLabel\n}) {\n  const progressWidth = session.label === \"Focusing\" ? parseInt(focusDuration * 60 - session.timeRemaining) / (focusDuration * 60 / 100) : parseInt(breakDuration * 60 - session.timeRemaining) / (breakDuration * 60 / 100); // console.log(\n  //   `${session.label} for focus ${focusDuration} break ${breakDuration} `\n  // );\n  // console.log(`progressWidth ${progressWidth} `);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }\n  }, session.label, \" for\", \" \", session.label === \"Focusing\" ? minutesToDuration(focusDuration) : minutesToDuration(breakDuration), \" \", \"minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, session.label === \"Focusing\" ? secondsToDuration(session.timeRemaining) : secondsToDuration(session.timeRemaining), \" \", \"remaining\"), !isTimerRunning && showLabel ? /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 43\n    }\n  }, \"PAUSED\") : null)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": progressWidth // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${progressWidth}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default ProgressSection;","map":{"version":3,"sources":["C:/Users/Anto/Project_Pomodoro_Timer_Qualified_1/src/ProgressSection.js"],"names":["React","useState","ProgressSection","session","focusDuration","breakDuration","minutesToDuration","secondsToDuration","isTimerRunning","showLabel","progressWidth","label","parseInt","timeRemaining","height","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,SAASC,eAAT,CAAyB;AACvBC,EAAAA,OADuB;AAEvBC,EAAAA,aAFuB;AAGvBC,EAAAA,aAHuB;AAIvBC,EAAAA,iBAJuB;AAKvBC,EAAAA,iBALuB;AAMvBC,EAAAA,cANuB;AAOvBC,EAAAA;AAPuB,CAAzB,EAQG;AACD,QAAMC,aAAa,GACjBP,OAAO,CAACQ,KAAR,KAAkB,UAAlB,GACIC,QAAQ,CAACR,aAAa,GAAG,EAAhB,GAAqBD,OAAO,CAACU,aAA9B,CAAR,IACET,aAAa,GAAG,EAAjB,GAAuB,GADxB,CADJ,GAGIQ,QAAQ,CAACP,aAAa,GAAG,EAAhB,GAAqBF,OAAO,CAACU,aAA9B,CAAR,IACER,aAAa,GAAG,EAAjB,GAAuB,GADxB,CAJN,CADC,CAQD;AACA;AACA;AAEA;;AACA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,OAAO,CAACQ,KADX,UACsB,GADtB,EAEGR,OAAO,CAACQ,KAAR,KAAkB,UAAlB,GACGL,iBAAiB,CAACF,aAAD,CADpB,GAEGE,iBAAiB,CAACD,aAAD,CAJvB,EAIwC,GAJxC,YAFF,eAUE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,OAAO,CAACQ,KAAR,KAAkB,UAAlB,GACGJ,iBAAiB,CAACJ,OAAO,CAACU,aAAT,CADpB,GAEGN,iBAAiB,CAACJ,OAAO,CAACU,aAAT,CAHvB,EAGgD,GAHhD,cAVF,EAgBG,CAACL,cAAD,IAAmBC,SAAnB,gBAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA/B,GAAiD,IAhBpD,CADF,CAFF,eAsBE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEK,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAeJ,aALjB,CAKgC;AALhC;AAME,IAAA,KAAK,EAAE;AAAEK,MAAAA,KAAK,EAAG,GAAEL,aAAc;AAA1B,KANT,CAMyC;AANzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAtBF,CADF;AAuCD;;AAED,eAAeR,eAAf","sourcesContent":["import React, { useState } from \"react\";\n\nfunction ProgressSection({\n  session,\n  focusDuration,\n  breakDuration,\n  minutesToDuration,\n  secondsToDuration,\n  isTimerRunning,\n  showLabel,\n}) {\n  const progressWidth =\n    session.label === \"Focusing\"\n      ? parseInt(focusDuration * 60 - session.timeRemaining) /\n        ((focusDuration * 60) / 100)\n      : parseInt(breakDuration * 60 - session.timeRemaining) /\n        ((breakDuration * 60) / 100);\n\n  // console.log(\n  //   `${session.label} for focus ${focusDuration} break ${breakDuration} `\n  // );\n\n  // console.log(`progressWidth ${progressWidth} `);\n  return (\n    <div>\n      {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n          <h2 data-testid=\"session-title\">\n            {session.label} for{\" \"}\n            {session.label === \"Focusing\"\n              ? minutesToDuration(focusDuration)\n              : minutesToDuration(breakDuration)}{\" \"}\n            minutes\n          </h2>\n          {/* TODO: Update message below correctly format the time remaining in the current session */}\n          <p className=\"lead\" data-testid=\"session-sub-title\">\n            {session.label === \"Focusing\"\n              ? secondsToDuration(session.timeRemaining)\n              : secondsToDuration(session.timeRemaining)}{\" \"}\n            remaining\n          </p>\n          {!isTimerRunning && showLabel ? <h2>PAUSED</h2> : null}\n        </div>\n      </div>\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          <div className=\"progress\" style={{ height: \"20px\" }}>\n            <div\n              className=\"progress-bar\"\n              role=\"progressbar\"\n              aria-valuemin=\"0\"\n              aria-valuemax=\"100\"\n              aria-valuenow={progressWidth} // TODO: Increase aria-valuenow as elapsed time increases\n              style={{ width: `${progressWidth}%` }} // TODO: Increase width % as elapsed time increases\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ProgressSection;\n"]},"metadata":{},"sourceType":"module"}