{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anto\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport FocusBreakTiming from \"../FocusBreakTiming\";\nimport PlayStopButton from \"../PlayStopButton\";\nimport ProgressSection from \"../ProgressSection\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [TimerRunning, setTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null); // ToDo: Allow the user to adjust the focus and break duration.\n\n  const [focusDuration, setfocusDuration] = useState(25);\n  const [breakDuration, setbreakDuration] = useState(5);\n  const [showLabel, setShowLabel] = useState(false);\n\n  const DecreaseFocus = () => {\n    return setfocusDuration(currentFocus => Math.max(5, currentFocus - 5));\n  };\n\n  const IncreaseFocus = () => {\n    return setfocusDuration(currentFocus => Math.min(60, currentFocus + 5));\n  };\n\n  const DecreaseBreak = () => {\n    return setbreakDuration(currentBreak => Math.max(1, currentBreak - 1));\n  };\n\n  const IncreaseBreak = () => {\n    return setbreakDuration(currentBreak => Math.min(15, currentBreak + 1));\n  };\n\n  const StopButton = () => {\n    // console.log(\" stop button clicked\");\n    setSession(current => current = null);\n    setTimerRunning(current => current = false);\n    setfocusDuration(current => current = 25);\n    setbreakDuration(current => current = 5);\n    setShowLabel(currentValue => currentValue = false);\n  };\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, TimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setShowLabel(currentValue => currentValue = true);\n    setTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FocusBreakTiming, {\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    TimerRunning: TimerRunning,\n    session: session,\n    minutesToDuration: minutesToDuration,\n    DecreaseFocus: DecreaseFocus,\n    IncreaseFocus: IncreaseFocus,\n    DecreaseBreak: DecreaseBreak,\n    IncreaseBreak: IncreaseBreak,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PlayStopButton, {\n    playPause: playPause,\n    TimerRunning: TimerRunning,\n    classNames: classNames,\n    StopButton: StopButton,\n    session: session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }), showLabel ? /*#__PURE__*/React.createElement(ProgressSection, {\n    session: session,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    minutesToDuration: minutesToDuration,\n    secondsToDuration: secondsToDuration,\n    TimerRunning: TimerRunning,\n    showLabel: showLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }) : null);\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/Anto/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","minutesToDuration","secondsToDuration","FocusBreakTiming","PlayStopButton","ProgressSection","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","TimerRunning","setTimerRunning","session","setSession","setfocusDuration","setbreakDuration","showLabel","setShowLabel","DecreaseFocus","currentFocus","IncreaseFocus","min","DecreaseBreak","currentBreak","IncreaseBreak","StopButton","current","currentValue","Audio","play","playPause","nextState","prevStateSession"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,eAAP,MAA4B,oBAA5B,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AAC3B,QAAMC,aAAa,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYH,SAAS,CAACC,aAAV,GAA0B,CAAtC,CAAtB;AACA,SAAO,EACL,GAAGD,SADE;AAELC,IAAAA;AAFK,GAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,WAAT,CAAqBC,aAArB,EAAoCC,aAApC,EAAmD;AACjD;AACF;AACA;AACE,SAAQC,cAAD,IAAoB;AACzB,QAAIA,cAAc,CAACC,KAAf,KAAyB,UAA7B,EAAyC;AACvC,aAAO;AACLA,QAAAA,KAAK,EAAE,UADF;AAELP,QAAAA,aAAa,EAAEK,aAAa,GAAG;AAF1B,OAAP;AAID;;AACD,WAAO;AACLE,MAAAA,KAAK,EAAE,UADF;AAELP,MAAAA,aAAa,EAAEI,aAAa,GAAG;AAF1B,KAAP;AAID,GAXD;AAYD;;AAED,SAASI,QAAT,GAAoB;AAClB;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCpB,QAAQ,CAAC,KAAD,CAAhD,CAFkB,CAGlB;;AACA,QAAM,CAACqB,OAAD,EAAUC,UAAV,IAAwBtB,QAAQ,CAAC,IAAD,CAAtC,CAJkB,CAMlB;;AACA,QAAM,CAACc,aAAD,EAAgBS,gBAAhB,IAAoCvB,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACe,aAAD,EAAgBS,gBAAhB,IAAoCxB,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM,CAACyB,SAAD,EAAYC,YAAZ,IAA4B1B,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAM2B,aAAa,GAAG,MAAM;AAC1B,WAAOJ,gBAAgB,CAAEK,YAAD,IAAkBjB,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYgB,YAAY,GAAG,CAA3B,CAAnB,CAAvB;AACD,GAFD;;AAIA,QAAMC,aAAa,GAAG,MAAM;AAC1B,WAAON,gBAAgB,CAAEK,YAAD,IAAkBjB,IAAI,CAACmB,GAAL,CAAS,EAAT,EAAaF,YAAY,GAAG,CAA5B,CAAnB,CAAvB;AACD,GAFD;;AAIA,QAAMG,aAAa,GAAG,MAAM;AAC1B,WAAOP,gBAAgB,CAAEQ,YAAD,IAAkBrB,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYoB,YAAY,GAAG,CAA3B,CAAnB,CAAvB;AACD,GAFD;;AAIA,QAAMC,aAAa,GAAG,MAAM;AAC1B,WAAOT,gBAAgB,CAAEQ,YAAD,IAAkBrB,IAAI,CAACmB,GAAL,CAAS,EAAT,EAAaE,YAAY,GAAG,CAA5B,CAAnB,CAAvB;AACD,GAFD;;AAIA,QAAME,UAAU,GAAG,MAAM;AACvB;AACAZ,IAAAA,UAAU,CAAEa,OAAD,IAAcA,OAAO,GAAG,IAAzB,CAAV;AACAf,IAAAA,eAAe,CAAEe,OAAD,IAAcA,OAAO,GAAG,KAAzB,CAAf;AACAZ,IAAAA,gBAAgB,CAAEY,OAAD,IAAcA,OAAO,GAAG,EAAzB,CAAhB;AACAX,IAAAA,gBAAgB,CAAEW,OAAD,IAAcA,OAAO,GAAG,CAAzB,CAAhB;AACAT,IAAAA,YAAY,CAAEU,YAAD,IAAmBA,YAAY,GAAG,KAAnC,CAAZ;AACD,GAPD;AAQA;AACF;AACA;AACA;AACA;;;AACElC,EAAAA,WAAW,CACT,MAAM;AACJ,QAAImB,OAAO,CAACX,aAAR,KAA0B,CAA9B,EAAiC;AAC/B,UAAI2B,KAAJ,CAAU,8CAAV,EAA0DC,IAA1D;AACA,aAAOhB,UAAU,CAACT,WAAW,CAACC,aAAD,EAAgBC,aAAhB,CAAZ,CAAjB;AACD;;AACD,WAAOO,UAAU,CAACd,QAAD,CAAjB;AACD,GAPQ,EAQTW,YAAY,GAAG,IAAH,GAAU,IARb,CAAX;AAWA;AACF;AACA;;AACE,WAASoB,SAAT,GAAqB;AACnBb,IAAAA,YAAY,CAAEU,YAAD,IAAmBA,YAAY,GAAG,IAAnC,CAAZ;AACAhB,IAAAA,eAAe,CAAEX,SAAD,IAAe;AAC7B,YAAM+B,SAAS,GAAG,CAAC/B,SAAnB;;AACA,UAAI+B,SAAJ,EAAe;AACblB,QAAAA,UAAU,CAAEmB,gBAAD,IAAsB;AAC/B;AACA;AACA,cAAIA,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B,mBAAO;AACLxB,cAAAA,KAAK,EAAE,UADF;AAELP,cAAAA,aAAa,EAAEI,aAAa,GAAG;AAF1B,aAAP;AAID;;AACD,iBAAO2B,gBAAP;AACD,SAVS,CAAV;AAWD;;AACD,aAAOD,SAAP;AACD,KAhBc,CAAf;AAiBD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AACE,IAAA,aAAa,EAAE1B,aADjB;AAEE,IAAA,aAAa,EAAEC,aAFjB;AAGE,IAAA,YAAY,EAAEI,YAHhB;AAIE,IAAA,OAAO,EAAEE,OAJX;AAKE,IAAA,iBAAiB,EAAElB,iBALrB;AAME,IAAA,aAAa,EAAEwB,aANjB;AAOE,IAAA,aAAa,EAAEE,aAPjB;AAQE,IAAA,aAAa,EAAEE,aARjB;AASE,IAAA,aAAa,EAAEE,aATjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAaE,oBAAC,cAAD;AACE,IAAA,SAAS,EAAEM,SADb;AAEE,IAAA,YAAY,EAAEpB,YAFhB;AAGE,IAAA,UAAU,EAAElB,UAHd;AAIE,IAAA,UAAU,EAAEiC,UAJd;AAKE,IAAA,OAAO,EAAEb,OALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,EAoBGI,SAAS,gBACR,oBAAC,eAAD;AACE,IAAA,OAAO,EAAEJ,OADX;AAEE,IAAA,aAAa,EAAEP,aAFjB;AAGE,IAAA,aAAa,EAAEC,aAHjB;AAIE,IAAA,iBAAiB,EAAEZ,iBAJrB;AAKE,IAAA,iBAAiB,EAAEC,iBALrB;AAME,IAAA,YAAY,EAAEe,YANhB;AAOE,IAAA,SAAS,EAAEM,SAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADQ,GAUN,IA9BN,CADF;AAkCD;;AAED,eAAeP,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport FocusBreakTiming from \"../FocusBreakTiming\";\nimport PlayStopButton from \"../PlayStopButton\";\nimport ProgressSection from \"../ProgressSection\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [TimerRunning, setTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setfocusDuration] = useState(25);\n  const [breakDuration, setbreakDuration] = useState(5);\n  const [showLabel, setShowLabel] = useState(false);\n\n  const DecreaseFocus = () => {\n    return setfocusDuration((currentFocus) => Math.max(5, currentFocus - 5));\n  };\n\n  const IncreaseFocus = () => {\n    return setfocusDuration((currentFocus) => Math.min(60, currentFocus + 5));\n  };\n\n  const DecreaseBreak = () => {\n    return setbreakDuration((currentBreak) => Math.max(1, currentBreak - 1));\n  };\n\n  const IncreaseBreak = () => {\n    return setbreakDuration((currentBreak) => Math.min(15, currentBreak + 1));\n  };\n\n  const StopButton = () => {\n    // console.log(\" stop button clicked\");\n    setSession((current) => (current = null));\n    setTimerRunning((current) => (current = false));\n    setfocusDuration((current) => (current = 25));\n    setbreakDuration((current) => (current = 5));\n    setShowLabel((currentValue) => (currentValue = false));\n  };\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(\n    () => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    TimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setShowLabel((currentValue) => (currentValue = true));\n    setTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <FocusBreakTiming\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n        TimerRunning={TimerRunning}\n        session={session}\n        minutesToDuration={minutesToDuration}\n        DecreaseFocus={DecreaseFocus}\n        IncreaseFocus={IncreaseFocus}\n        DecreaseBreak={DecreaseBreak}\n        IncreaseBreak={IncreaseBreak}\n      />\n\n      <PlayStopButton\n        playPause={playPause}\n        TimerRunning={TimerRunning}\n        classNames={classNames}\n        StopButton={StopButton}\n        session={session}\n      />\n      {showLabel ? (\n        <ProgressSection\n          session={session}\n          focusDuration={focusDuration}\n          breakDuration={breakDuration}\n          minutesToDuration={minutesToDuration}\n          secondsToDuration={secondsToDuration}\n          TimerRunning={TimerRunning}\n          showLabel={showLabel}\n        />\n      ) : null}\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}